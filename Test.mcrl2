sort Method = struct
recursiveMethod(doIt:Bool) |
recursiveMethod'
;

act method_call_begin,method_var_begin:Method;
act method_call_end,method_var_end:Method;

act method_begin:Method;
act method_end:Method;
act internal;


proc RecursiveProc = 
  sum doIt:Bool.method_var_begin(recursiveMethod(doIt)).
  doIt-> method_call_begin(recursiveMethod(false)).
	 method_call_end(recursiveMethod').method_var_end(recursiveMethod')
	<>
	method_var_end(recursiveMethod')
;


proc startProc = method_call_begin(recursiveMethod(false)).method_call_end(recursiveMethod');
init hide ({internal},
 allow({internal,method_begin,method_end
},
comm({
method_call_begin|method_var_begin->
method_begin,
method_call_end|method_var_end->
method_end
}, 
% 				P(1) || ProcP(1)
				startProc || RecursiveProc
)));

% %---------DONE client---------
% proc MindCluster___moduleProcess(id:Nat) = 
%   sum etype:eType,taskId:Nat,taskObj:TaskObject.method_var_begin(id,__moduleProcess(etype,taskId,taskObj)). 
%     method_call_begin(id,__getInstance(etype)).
%     sum modInstance:Nat.method_call_end(id,__getInstance'(modInstance)).
%     method_call_begin(id,_ex_processTask(modInstance,taskId,taskObj)).
%     sum reply:Reply,fastTrackType:eType.method_call_end(id,_ex_processTask'(reply,fastTrackType)).
%     method_call_begin(id,__storeInstance(etype,modInstance)).
%     method_call_end(id,__storeInstance').
%     ((reply!=OK) ->
%       method_var_end(id,__moduleProcess'(OK,TaskError))
%     <>
%       (
% 	method_call_begin(id,__modules_keys).
% 	sum modules:List(eType).method_call_end(id,__modules_keys'(modules)).
% 	(fastTrackType!=None && (fastTrackType in modules)) -> 
% 	  % return self.__moduleProcess( fastTrackType, taskId, taskStub, fastTrackLevel + 1 ) 
% 	  %<-- HOW TO RECURSIVELY CALL? Like this below?? test it on a hypotethical example
% 	  % or just ignore the if section below, it's a new implementation anyways
% 	  method_call_begin(id,__moduleProcess(fastTrackType,taskId,taskObj)).
% 	  sum reply:Reply,message:Message.method_call_end(id,__moduleProcess'(reply,message)).
% 	  method_var_end(id,__moduleProcess'(reply,message))
% 	<> (
% 	method_var_end(id,__moduleProcess'(OK,TaskFreeze))
% 	+
% 	method_var_end(id,__moduleProcess'(OK,TaskDone))
% 	  )
%       )
%     )
% ;
