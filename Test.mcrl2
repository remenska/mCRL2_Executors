% ==================DATA 
sort eType = struct One | Two | Three;

sort TaskObject = struct taskObj(taskID:Nat,optimizationChain:List(eType),eType:eType) | None;

% sort None = struct none;
% =================
sort __execTypes = eType -> Int;

% cons empty: __execTypes;
map __execTypes_inc: __execTypes # eType -> __execTypes;
    __execTypes_get: __execTypes # eType -> Int;
    __execTypes_dec:__execTypes # eType -> __execTypes;
    __execTypes_reset:__execTypes # eType -> __execTypes;
    __execTypes_get_eTypes:__execTypes -> List(eType);
var a: __execTypes;
    eType: eType;
    list:List(eType);
    el:eType;
eqn __execTypes_inc(a, eType) = a[eType -> succ(__execTypes_get(a,eType))];
    __execTypes_dec(a, eType) = if(__execTypes_get(a,eType)>0,
				      a[eType -> pred(__execTypes_get(a,eType))],
					    a[eType -> __execTypes_get(a,eType)]);
    __execTypes_get(a, eType) = a(eType);
    __execTypes_reset(a, eType) = a[eType->0];
%     __execTypes_get_eTypes(a(el)) = if(__execTypes_get(a,el)>0,el |> __execTypes_get_eTypes(a),__execTypes(a));
    __execTypes_get_eTypes(a[el->0]) = [];
    __execTypes_get(a,el)>0 -> __execTypes_get_eTypes(a) = el|> __execTypes_get_eTypes(a);

map __execTypes_init: __execTypes;
var eType:eType;
eqn __execTypes_init(eType) = 0;
%     initialTypes(Two) = 0;
% var initTypes:__execTypes;

% map f: Nat # Nat # Pos -> Bool;
% eqn f = lambda x,y: Nat, p: Pos . x + y == p
    
% =================

% =================
sort __tasks = Nat -> TaskObject;
map pop: __tasks # Nat -> __tasks;
    get: __tasks # Nat -> TaskObject;
    set: __tasks # Nat # TaskObject -> __tasks;
    keys: __tasks -> List(Nat);
var t:__tasks;
    pos:Nat;
    to:TaskObject;
eqn pop(t,pos) = t[pos->None];
    get(t,pos) = t(pos);
    set(t,pos,to) = t[pos->to];

map init__tasks:__tasks;
var taskObj1:TaskObject;
% eqn taskObj1 = taskObj(1,[One,Two],Three);
% eqn taskObj1 = 
 eqn init__tasks(1) = taskObj(1,[One,Two],Three);

% =================

act action2:TaskObject;
act internal;
act action1:Int;
act actionGet:List(eType);
proc P(ex:__execTypes,initTasks:__tasks) = 
actionGet(__execTypes_get_eTypes(ex)).
action1(ex(Two)).action1(__execTypes_get(__execTypes_inc(ex,One),One)).action2(initTasks(1)).
action1(__execTypes_get(__execTypes_reset(ex,Two),Two)).
action2(get(pop(initTasks,1),1)).
P(__execTypes_inc(ex,One),initTasks)
;

proc Q = internal;

init P(__execTypes_init,init__tasks);
% init Q;