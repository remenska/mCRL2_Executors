sort Method  = struct method1 | method2 | method3 | method4;
act internal;
act method_var_begin,method_var_end:Nat#Method;
act a,b;

act method_call_begin,method_call_end:Nat#Method;
act method_begin,method_end:Nat#Method;

proc Pmethod1(id:Nat) = method_var_begin(id,method1).
method_call_begin(id,method2).
method_call_end(id,method2).
method_call_begin(id,method3).
method_call_end(id,method3).
method_var_end(id,method1). 
Pmethod1(id);

proc Pmethod2(id:Nat) = method_var_begin(id,method2).a.method_var_end(id,method2)
.Pmethod2(id);

proc Pmethod3(id:Nat) = method_var_begin(id,method3).b.method_var_end(id,method3)
.Pmethod3(id);

proc P(id:Nat) = method_call_begin(id,method1).method_call_end(id,method1);

init hide ({internal},
%  allow({internal,method_begin,method_end,a,b,method_begin|method_end,method_begin|method_begin,method_end|method_end,a|a,a|b,b|b
   block({method_var_begin,method_var_end,method_call_begin,method_call_end
},
comm({
method_call_begin|method_var_begin->
method_begin,
method_call_end|method_var_end->
method_end
}, 
	P(1) || Pmethod1(1) || Pmethod2(1) || Pmethod3(1) ||
  P(2) || Pmethod1(2) || Pmethod2(2) || Pmethod3(2)
)));


% whwat if I had just a limited number of concurrent processes, say N=10, then I would have 10 different instances of each method and synch only when the id matches
