sort Method  = struct method1 | method2 | method3 | method4;
act internal;
act method_var_begin,method_var_end:Nat#Method;
act action1,action2,action3;

act method_call_begin,method_call_end:Nat#Method;
act method_begin,method_end:Nat#Method;

proc method1(id:Nat) = method_var_begin(id,method1).
			  method_call_begin(id,method4).
			  method_call_end(id,method4).
			  (
			      method_call_begin(id,method2).
			      method_call_end(id,method2)
			      + 
			      method_call_begin(id,method3).
			      method_call_end(id,method3)).
			method_var_end(id,method1)
.method1(id);

proc method2(id:Nat) = method_var_begin(id,method2).
						  action2.
		       method_var_end(id,method2)
.method2(id);

proc method3(id:Nat) = method_var_begin(id,method3).
						  action3.
		       method_var_end(id,method3)
.method3(id);

proc method4(id:Nat) = method_var_begin(id,method4).
		       method_var_end(id,method4)
.method4(id);


proc P(id:Nat) = method_call_begin(id,method1).
		 method_call_end(id,method1);

proc ProcP(id:Nat) = method1(id) || method2(id) || method3(id) || method4(id);

init hide ({internal},
  allow({internal,method_begin,method_end,method_begin|method_end,method_begin|method_begin,method_end|method_end,
  action3|action3,action2|action2,action3|action2,action2,action3, method_begin|action2,method_begin|action3,
  method_end|action2,method_end|action3
%   block({method_var_begin,method_var_end,method_call_begin,method_call_end % <-- cannot linearize
},
comm({
method_call_begin|method_var_begin->
method_begin,
method_call_end|method_var_end->
method_end
}, 
	ProcP(1) || P(1) || ProcP(2) || P(2) 
)));
